#
# The compile and linking options for  building T2KReWeight based on
# the flags used when running the configure script:
# Type './configure --help' for more information
#
# Authors:
# Costas Andreopoulos <costas.andreopoulos \at stfc.ac.uk>
#  STFC - Rutherford Appleton Laboratory, UK
#
# Jim Dobson <j.dobson07 \at imperial.ac.uk>
#  Imperial College London, UK

#-------------------------------------------------------------------
#                 Read in configure script output
#-------------------------------------------------------------------
# Include file generated by the configure script
include $(T2KREWEIGHT)/make/Make.config

ifndef T2KREWEIGHT_OPTION_WITH_CXX_USERDEF_FLAGS
 T2KREWEIGHT_OPTION_WITH_CXX_USERDEF_FLAGS=
endif

ifndef T2KREWEIGHT_OPTION_WITH_CXX_DEBUG_FLAG
 T2KREWEIGHT_OPTION_WITH_CXX_DEBUG_FLAG=
endif

ifndef T2KREWEIGHT_OPTION_WITH_CXX_OPTIMIZ_FLAG
 T2KREWEIGHT_OPTION_WITH_CXX_OPTIMIZ_FLAG=
endif

#-------------------------------------------------------------------
#                           ARCHITECTURE
#-------------------------------------------------------------------
# As defined by ROOT
ARCH    = $(shell root-config --arch)
ARCH_OK =

#-------------------------------------------------------------------
#                              ROOT
#-------------------------------------------------------------------
# ROOT headers and libraries

ROOT_INCLUDES  = -I$(shell root-config --incdir)
ROOT_LIBRARIES = $(shell root-config --glibs) -lMinuit -lGeom -lEG

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_GENIE)),YES)
ROOT_LIBRARIES := $(ROOT_LIBRARIES) -lEGPythia6
endif

#-------------------------------------------------------------------
#                              oaAnalysis
#-------------------------------------------------------------------
# oaAnalysis headers and libraries
#
ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_OAANALYSIS)),YES)
OAANALYSIS_LIBRARIES := -L$(T2KREWEIGHT_OPTION_WITH_OAANALYSIS_LIB) -loaAnalysisReader
OAANALYSIS_INCLUDES :=  -I$(T2KREWEIGHT_OPTION_WITH_OAANALYSIS_LIB)
else
OAANALYSIS_LIBRARIES =
OAANALYSIS_INCLUDES =
endif

#-------------------------------------------------------------------
#                              GENIE
#-------------------------------------------------------------------
# GENIE headers and libraries
#
ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_GENIE)),YES)

GENIE_INCLUDES  = -I$(shell genie-config --topsrcdir)
GENIE_LIBRARIES = $(shell genie-config --libs)

# PYTHIA6 dir/lib/object file
PYTHIA_DIR = $(T2KREWEIGHT_OPTION_WITH_PYTHIA6_LIB)
PYTHIA_O   = $(wildcard $(PYTHIA_DIR)/pythia*.o) # match all vrs

PYTHIA_LIBRARIES  = -L$(PYTHIA_DIR) -lPythia6 $(PYTHIA_O)

ifeq ($(strip $(ARCH)),macosx)
PYTHIA_LIBRARIES  = -L$(PYTHIA_DIR) -lPythia6
endif

GENIE_LIBRARIES := $(GENIE_LIBRARIES) $(PYTHIA_LIBRARIES) $(LHAPDF_LIBRARIES)

# XML lib & include directories
ifdef T2KREWEIGHT_OPTION_WITH_LIBXML2_INC
XML_INC_DIR = $(T2KREWEIGHT_OPTION_WITH_LIBXML2_INC)
else
XML_INC_DIR = /usr/include/libxml2
endif

ifdef T2KREWEIGHT_OPTION_WITH_LIBXML2_LIB
XML_LIB_DIR = $(T2KREWEIGHT_OPTION_WITH_LIBXML2_LIB)
else
XML_LIB_DIR = /usr/lib
endif

# XML libraries and headers
XML_INCLUDES  := -I$(XML_INC_DIR)
XML_LIBRARIES := -L$(XML_LIB_DIR) -lxml2

# log4cpp lib & include directory
ifdef T2KREWEIGHT_OPTION_WITH_LOG4CPP_INC
LOG_INC_DIR = $(T2KREWEIGHT_OPTION_WITH_LOG4CPP_INC)
else
LOG_INC_DIR = /usr/local/src/log4cpp/include
endif

ifdef T2KREWEIGHT_OPTION_WITH_LOG4CPP_LIB
LOG_LIB_DIR = $(T2KREWEIGHT_OPTION_WITH_LOG4CPP_LIB)
else
LOG_LIB_DIR = /usr/local/lib
endif

# log4cpp libraries and headers
LOG_INCLUDES  := -I$(LOG_INC_DIR)
LOG_LIBRARIES := -L$(LOG_LIB_DIR) -llog4cpp

LHAPDF_LIBRARIES =
LHAPDF_INCLUDES  =

# lhappdf libraries and headers
ifeq ($(strip $(GOPT_ENABLE_LHAPDF)),YES)

LHAPDF_INCLUDES = -I$(GOPT_WITH_LHAPDF_INC)

ifeq ($(strip $(ARCH)),macosx)
LHAPDF_LIBRARIES = -L$(GOPT_WITH_LHAPDF_LIB) -lLHAPDF /usr/local/lib/libgfortran.dylib

have_g2c := $wildcard(/usr/local/lib/libg2c.dylib)
ifeq ($(strip $(have_g2c)),)
else
LHAPDF_LIBRARIES := $(LHAPDF_LIBRARIES) /usr/local/lib/libg2c.dylib
endif

else
LHAPDF_LIBRARIES = -L$(GOPT_WITH_LHAPDF_LIB) -lLHAPDF -L/usr/lib -L/usr/lib64 -lg2c
endif

endif

else
  GENIE_INCLUDES  =
  GENIE_LIBRARIES =
endif

#-------------------------------------------------------------------
#                              NEUT
#-------------------------------------------------------------------
#
ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_NEUT)),YES)

# NEUT headers and libraries

  NEUT_MACHINE   = $(shell Machine)
  NEUT_LIB_DIR   = $(NEUT_ROOT)/lib/$(NEUT_MACHINE)

  NEUT_CLASS_DIR = $(NEUT_ROOT)/src/neutclass

# I need to grab the following libraries:
#   libneutcore_X.Y.Z.a
#   libnuccorrspl_X.Y.Z.a
#   libnuceff_X.Y.Z.a
#   libpartnuck_X.Y.Z.a
#   libskmcsvc_X.Y.Z.a
# with whatever version number (different for each library) they are
# coming with.
# For each one of the above, I will:
# - find all libraries named lib<name>*.a and remove the .a part
# - if many were found use the first one
# - strip out thepath name
# - replace the first lib with -l so lib<name> -> -l<name>

# libneutcore:
  PNEUTCORES = $(subst .a,,$(wildcard $(NEUT_LIB_DIR)/libneutcore*.a))
  PNEUTCORE  = $(shell awk 'BEGIN {str="$(PNEUTCORES)"; \
               split(str, tokens, " "); print tokens[1]}')
  NEUTCORE   = $(shell awk 'BEGIN {str="$(PNEUTCORE)"; \
               n=split(str, tokens, "/"); print tokens[n]}')
  LNEUTCORE  = $(shell awk 'BEGIN { str="$(NEUTCORE)"; \
               sub(/lib/, "-l", str); print str}')
# libnuccorrspl:
  PNUCCORS = $(subst .a,,$(wildcard $(NEUT_LIB_DIR)/libnuccorrspl*.a))
  PNUCCOR  = $(shell awk 'BEGIN {str="$(PNUCCORS)"; \
               split(str, tokens, " "); print tokens[1]}')
  NUCCOR   = $(shell awk 'BEGIN {str="$(PNUCCOR)"; \
               n=split(str, tokens, "/"); print tokens[n]}')
  LNUCCOR  = $(shell awk 'BEGIN { str="$(NUCCOR)"; \
               sub(/lib/, "-l", str); print str}')
# libnuceff:
  PNUCEFFS = $(subst .a,,$(wildcard $(NEUT_LIB_DIR)/libnuceff*.a))
  PNUCEFF  = $(shell awk 'BEGIN {str="$(PNUCEFFS)"; \
               split(str, tokens, " "); print tokens[1]}')
  NUCEFF   = $(shell awk 'BEGIN {str="$(PNUCEFF)"; \
               n=split(str, tokens, "/"); print tokens[n]}')
  LNUCEFF  = $(shell awk 'BEGIN { str="$(NUCEFF)"; \
               sub(/lib/, "-l", str); print str}')
# libpartnuck:
  PPARTNUCS = $(subst .a,,$(wildcard $(NEUT_LIB_DIR)/libpartnuck*.a))
  PPARTNUC  = $(shell awk 'BEGIN {str="$(PPARTNUCS)"; \
               split(str, tokens, " "); print tokens[1]}')
  PARTNUC   = $(shell awk 'BEGIN {str="$(PPARTNUC)"; \
               n=split(str, tokens, "/"); print tokens[n]}')
  LPARTNUC  = $(shell awk 'BEGIN { str="$(PARTNUC)"; \
               sub(/lib/, "-l", str); print str}')
# libskmcsvc:
  PSKMCSVCS = $(subst .a,,$(wildcard $(NEUT_LIB_DIR)/libskmcsvc*.a))
  PSKMCSVC  = $(shell awk 'BEGIN {str="$(PSKMCSVCS)"; \
               split(str, tokens, " "); print tokens[1]}')
  SKMCSVC   = $(shell awk 'BEGIN {str="$(PSKMCSVC)"; \
               n=split(str, tokens, "/"); print tokens[n]}')
  LSKMCSVC  = $(shell awk 'BEGIN { str="$(SKMCSVC)"; \
               sub(/lib/, "-l", str); print str}')

# neutclass:
  ifneq ("$(wildcard $(NEUT_CLASS_DIR)/neutnucfsistep.so)","")
      NEUT_CLASS_LIBS = $(NEUT_CLASS_DIR)/neutpart.so $(NEUT_CLASS_DIR)/neutfsipart.so \
                        $(NEUT_CLASS_DIR)/neutnucfsistep.so $(NEUT_CLASS_DIR)/neutnucfsivert.so \
                        $(NEUT_CLASS_DIR)/neutvect.so $(NEUT_CLASS_DIR)/neutfsivert.so \
	                    $(NEUT_CLASS_DIR)/neutvtx.so $(NEUT_CLASS_DIR)/neutrootTreeSingleton.so
  else
      NEUT_CLASS_LIBS = $(NEUT_CLASS_DIR)/neutpart.so $(NEUT_CLASS_DIR)/neutfsipart.so \
                        $(NEUT_CLASS_DIR)/neutvect.so $(NEUT_CLASS_DIR)/neutfsivert.so \
		                $(NEUT_CLASS_DIR)/neutvtx.so $(NEUT_CLASS_DIR)/neutrootTreeSingleton.so
  endif


# CERN Libraries

  CERN_ROOT=$(T2KREWEIGHT_OPTION_WITH_CERN)
  CERNLIB=${CERN}/${CERN_LEVEL}/lib/libjetset74.a \
          ${CERN}/${CERN_LEVEL}/lib/libpdflib804.a \
          -L$(CERN_ROOT)/lib `cernlib jetset74 photos202 mathlib packlib kernlib`
  CERNINC=-I$(CERN_ROOT)/inc


  NEUT_LIBRARIES = -L$(NEUT_ROOT)/src/reweight -lNReWeight \
                   $(NEUT_CLASS_LIBS) $(CERNLIB)

  NEUT_INCLUDES  = -I$(NEUT_ROOT)/include -I$(NEUT_ROOT)/src/reweight \
                   -I$(NEUT_CLASS_DIR) $(CERNINC)

else
  NEUT_INCLUDES  =
  NEUT_LIBRARIES =
endif

#-------------------------------------------------------------------
#                              JNuBeam
#-------------------------------------------------------------------
# JNuBeam headers and libraries
#

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_JNUBEAM)),YES)

# JNUBEAM headers and libraries

  JNUBEAM_LIBRARIES = -L$(JNUBEAM) -lJReWeight
  JNUBEAM_INCLUDES  = -I$(JNUBEAM)

else
  JNUBEAM_INCLUDES  =
  JNUBEAM_LIBRARIES =
endif

#-------------------------------------------------------------------
#                              NIWG
#-------------------------------------------------------------------
# NIWG headers and libraries
#

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_NIWG)),YES)

# NIWG headers and libraries

  NIWG_LIBRARIES = -L$(NIWG) -lNIWGReWeight
  NIWG_INCLUDES  = -I$(NIWG)

else
  NIWG_INCLUDES  =
  NIWG_LIBRARIES =
endif

#-------------------------------------------------------------------
#                              GEANT
#-------------------------------------------------------------------
# GEANT headers and libraries
#

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_GEANT)),YES)

# GEANT headers and libraries

  GEANT_LIBRARIES = -L$(GEANTRW) -lGEANTReWeight
  GEANT_INCLUDES  = -I$(GEANTRW)

else
  GEANT_INCLUDES  =
  GEANT_LIBRARIES =
endif

#-------------------------------------------------------------------
#                              Tracker File
#-------------------------------------------------------------------
# Tracker headers and libraries
#

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_TRACKERFILE)),YES)

# Tracker file headers and libraries

  TRACKERFILE_LIBRARIES = -L$(TRACKERFILE_LIB) -lBANFF
  TRACKERFILE_INCLUDES  = -I$(TRACKERFILE_LIB)

else
  TRACKERFILE_INCLUDES  =
  TRACKERFILE_LIBRARIES =
endif


#-------------------------------------------------------------------
#               psyche (interface to ND280 analyses)
#-------------------------------------------------------------------
#psyche headers and libraries.

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_PSYCHE)),YES)
  PSYCHE_DIRS = $(PSYCHEIOROOT) $(PSYCHECOREROOT)  $(PSYCHESYSTEMATICSROOT) $(PSYCHESELECTIONSROOT) $(PSYCHESTEERINGROOT) $(PSYCHEUTILSROOT) $(PSYCHEND280UTILSROOT) $(PSYCHEEVENTMODELROOT)

  PSYCHE_LIBRARIES := $(addsuffix /$(T2KREWEIGHT_OPTION_WITH_PSYCHE_CONFIG),$(T2KREWEIGHT_OPTION_WITH_PSYCHE_DIRS))
  PSYCHE_LIBRARIES := $(addprefix -L,$(PSYCHE_LIBRARIES))
  PSYCHE_LIBRARIES += -lpsycheIO -lpsycheCore -lpsycheSystematics -lpsycheSelections -lpsycheSteering -lpsycheUtils -lpsycheND280Utils -lpsycheEventModel

  PSYCHE_INCLUDES := $(addsuffix /src,$(T2KREWEIGHT_OPTION_WITH_PSYCHE_DIRS))
  PSYCHE_INCLUDES := $(addprefix -I,$(PSYCHE_INCLUDES))

else
  PSYCHE_LIBRARIES =
  PSYCHE_INCLUDES =
endif

#-------------------------------------------------------------------
#                   PROFILING / DEBUGING OPTIONS
#-------------------------------------------------------------------
# Linking in the Google Profiling Tool library
#
GPROF_LIBRARIES =
ifdef T2KREWEIGHT_OPTION_PROFILER
  ifdef GPROFILER_LIB
    GPROF_LIBRARIES += -L$(GPROFILER_LIB) -lprofiler
  else
    GPROF_LIBRARIES += -L/usr/local/lib -lprofiler
  endif
endif

#-------------------------------------------------------------------
#                      T2KReWeight itself
#-------------------------------------------------------------------

# release info
T2KREWEIGHT_VERSION     = $(shell awk '{print $0}' $(T2KREWEIGHT)/VERSION)
T2KREWEIGHT_LIB_VERSION = -$(T2KREWEIGHT_VERSION)

# paths
T2KREWEIGHT_LIB_PATH := $(T2KREWEIGHT)/lib
T2KREWEIGHT_BIN_PATH := $(T2KREWEIGHT)/bin
T2KREWEIGHT_SRC_PATH := $(T2KREWEIGHT)/src

# libnames
T2KREWEIGHT_LIB := libT2KReWeight

# dictionary names
T2KREWEIGHT_DICT := $(T2KREWEIGHT)/src/_ROOT_DICT_ReWeight

# includes
T2KREWEIGHT_INCLUDES := -I$(T2KREWEIGHT_SRC_PATH)

# libraries
T2KREWEIGHT_LIBRARIES := -L$(T2KREWEIGHT_LIB_PATH) -lT2KReWeight

#-------------------------------------------------------------------
#                       Some global variables
#-------------------------------------------------------------------
MAKE   := gmake
RM      = rm -f
MKDIR   = mkdir -p
CAT     = cat
SYMLINK = ln -sf
COPY    = cp
INSTALL = @INSTALL@

# AR, ARFLAGS and RANLIB are for manipulating an archive
AR        = ar
ARFLAGS   = rv
RANLIB    = ranlib

#-------------------------------------------------------------------
#                        COMPILER OPTIONS
#-------------------------------------------------------------------

# -- gcc

CXX = g++
LD  = g++

# get gcc version & split in '.' delimited tokens (major/minor/revison num.)
CXXVRS      = $(shell $(CXX) -dumpversion)
CXXVRS_MAJ  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[1]}')
CXXVRS_MIN  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[2]}')
CXXVRS_REV  = $(shell awk 'BEGIN {\
		str="$(CXXVRS)"; split(str, tk, "."); print tk[3]}')

# gcc version >= 4.1.0 ?
GCC_GE_4_1_0  = $(shell awk 'BEGIN {\
		if($(CXXVRS_MAJ)>=4 && $(CXXVRS_MIN)>0) print "YES"}')

# MAC OS X 32bit (as defined by root) with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx)
ARCH_OK       = YES
CXXFLAGS      = -m32 -pipe -W -Wall \
		-fsigned-char -fno-common -flat_namespace -undefined warning \
		$(T2KREWEIGHT_OPTION_WITH_CXX_DEBUG_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_OPTIMIZ_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
else
  CXXFLAGS += -Wno-long-double
endif

LDFLAGS       = -m32 -bind_at_load -undefined warning
SOFLAGS       = -m32 -dynamiclib -flat_namespace \
		-single_module -undefined dynamic_lookup -undefined warning
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

# MAC OS X 64bit (as defined by root) with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),macosx64)
ARCH_OK       = YES
CXXFLAGS      = -m64 -pipe -W -Wall \
		-fsigned-char -fno-common -flat_namespace \
		$(T2KREWEIGHT_OPTION_WITH_CXX_DEBUG_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_OPTIMIZ_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_USERDEF_FLAGS)
ifeq ($(strip $(GCC_GE_4_1_0)), YES)
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
else
  CXXFLAGS += -Wno-long-double
endif

LDFLAGS       = -m64 -bind_at_load
SOFLAGS       = -m64 -dynamiclib -flat_namespace \
		-single_module -undefined dynamic_lookup
DllSuf       := dylib
DllLinkSuf   := so
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

# LINUX / 32-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linux)
ARCH_OK       = YES
CXXFLAGS      = -Wall -fPIC \
		$(T2KREWEIGHT_OPTION_WITH_CXX_DEBUG_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_OPTIMIZ_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES)
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g -lgfortran -Wl,--no-as-needed
SOFLAGS       = -shared
DllSuf       := so
DllLinkSuf   :=
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

# LINUX / 64-bit x86 / with gcc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ifeq ($(strip $(ARCH)),linuxx8664gcc)
ARCH_OK       = YES
CXXFLAGS      = -Wall -fPIC -Wno-write-strings \
		$(T2KREWEIGHT_OPTION_WITH_CXX_DEBUG_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_OPTIMIZ_FLAG) \
		$(T2KREWEIGHT_OPTION_WITH_CXX_USERDEF_FLAGS) 
ifeq ($(strip $(GCC_GE_4_1_0)), YES) 
  CXXFLAGS += -Wno-strict-aliasing -ffriend-injection
endif
LDFLAGS       = -g -lgfortran -Wl,--no-as-needed
SOFLAGS       = -shared
DllSuf       := so
DllLinkSuf   :=
StaticLibSuf := a
ObjSuf       := o
SrcSuf       := cxx
FORT         := g77
FORTOPTS     := $(FFLAGS) -g -c -O -DLINUX $(F77INCS) -fno-second-underscore
RANLIB       := ranlib
SOCMD         = $(LD)
OutPutOpt     = -o
SOMINF =
endif

#-------------------------------------------------------------------
#                            SUMMING-UP
#-------------------------------------------------------------------

# LIBS should contain general libraries needed to compile programs.

LIBRARIES := $(SYSLIBS) \
	     $(ROOT_LIBRARIES) \
	     $(T2KREWEIGHT_LIBRARIES)

ifeq ($(strip $(ARCH)),macosx)
LIBRARIES := $(SYSLIBS) \
	     $(ROOT_LIBRARIES) \
	     $(T2KREWEIGHT_LIBRARIES) \
	     $(GPROF_LIBRARIES)
endif

INCLUDES  = $(ROOT_INCLUDES) \
	    $(T2KREWEIGHT_INCLUDES)

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_OAANALYSIS)),YES)
LIBRARIES += $(OAANALYSIS_LIBRARIES)
INCLUDES  += $(OAANALYSIS_INCLUDES)
endif

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_GENIE)),YES)
LIBRARIES += $(GENIE_LIBRARIES) $(XML_LIBRARIES) $(LOG_LIBRARIES)
INCLUDES  += $(GENIE_INCLUDES) $(XML_INCLUDES) $(LOG_INCLUDES)
endif

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_NEUT)),YES)
LIBRARIES += $(NEUT_LIBRARIES)
INCLUDES  += $(NEUT_INCLUDES)
endif


ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_JNUBEAM)),YES)
LIBRARIES += $(JNUBEAM_LIBRARIES)
INCLUDES  += $(JNUBEAM_INCLUDES)
endif

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_NIWG)),YES)
LIBRARIES += $(NIWG_LIBRARIES)
INCLUDES  += $(NIWG_INCLUDES)
endif

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_GEANT)),YES)
LIBRARIES += $(GEANT_LIBRARIES)
INCLUDES  += $(GEANT_INCLUDES)
endif

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_TRACKERFILE)),YES)
LIBRARIES += $(TRACKERFILE_LIBRARIES)
INCLUDES  += $(TRACKERFILE_INCLUDES)
endif

ifeq ($(strip $(T2KREWEIGHT_OPTION_ENABLE_PSYCHE)),YES)
LIBRARIES += $(PSYCHE_LIBRARIES)
INCLUDES  += $(PSYCHE_INCLUDES)
endif

# Strip /usr/include from INCLUDES since it is implicit for g++ and
# causes rootcint to fail
INCLUDES := $(filter-out -I/usr/include,$(INCLUDES))
LIBRARIES := $(filter-out -L/usr/lib,$(LIBRARIES))

LIBRARIES := $(LIBRARIES) -lgfortran

# Default compiler and preprocessor flags

CFLAGS    = -g
CXXFLAGS := $(CFLAGS) $(ENV_CXXFLAGS) $(CXXFLAGS)
CPPFLAGS  = $(INCLUDES)
#LDFLAGS  := $(LDFLAGS) $(LIBRARIES)

#-------------------------------------------------------------------
#                            MAKE RULES
#-------------------------------------------------------------------

.SUFFIXES : .inc .cxx

#.cc.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

#.cxx.o:
#	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) $<

.C.o:
	$(CXX) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.c.o:
	$(CC) -c -o $@ $(CXXFLAGS) $(CPPFLAGS) $<

.F.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.f.o :
	$(FORT) $(FORTOPTS) -o $@ $<

.F.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o

.f.a :
	$(FORT) $(FORTOPTS) -o $*.o $<
	$(AR) $(ARFLAGS) $@ $*.o
	$(RANLIB) $@
	$(RM) $*.o
