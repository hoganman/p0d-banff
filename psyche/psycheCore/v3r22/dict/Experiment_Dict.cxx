//
// File generated by /physics/software/t2k/ND280/v11r31/ROOT/v5r34p09n04/Linux-x86_64/bin/rootcint at Wed Oct  4 12:18:58 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIdictdIExperiment_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Experiment_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SampleGroup SampleGroup;
      #else
      class SampleGroup  {
         public:
         //friend XX;
         string _name; //
         vector< ::DataSample* > _dataSamples; //
         map< ::string, ::DataSample* > _mcSamples; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Experiment Experiment;
      #else
      class Experiment  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Experiment() throw() {};
         string _name; //
         map< ::string, ::SampleGroup > _sampleGroups; //
         string _filePath; //
         string _tree; //
         vector< ::string > _mcFiles; //
         vector< ::string > _dataFiles; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SampleGroup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SampleGroup_Dictionary();
   static void *new_SampleGroup(void *p = 0);
   static void *newArray_SampleGroup(Long_t size, void *p);
   static void delete_SampleGroup(void *p);
   static void deleteArray_SampleGroup(void *p);
   static void destruct_SampleGroup(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SampleGroup*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SampleGroup) == sizeof(::ROOT::Shadow::SampleGroup));
      ::SampleGroup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SampleGroup),0);
      static ::ROOT::TGenericClassInfo 
         instance("SampleGroup", "./../src/Experiment.hxx", 17,
                  typeid(::SampleGroup), DefineBehavior(ptr, ptr),
                  &SampleGroup_ShowMembers, &SampleGroup_Dictionary, isa_proxy, 4,
                  sizeof(::SampleGroup) );
      instance.SetNew(&new_SampleGroup);
      instance.SetNewArray(&newArray_SampleGroup);
      instance.SetDelete(&delete_SampleGroup);
      instance.SetDeleteArray(&deleteArray_SampleGroup);
      instance.SetDestructor(&destruct_SampleGroup);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SampleGroup*)
   {
      return GenerateInitInstanceLocal((::SampleGroup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SampleGroup*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SampleGroup_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SampleGroup*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Experiment_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Experiment_Dictionary();
   static void delete_Experiment(void *p);
   static void deleteArray_Experiment(void *p);
   static void destruct_Experiment(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Experiment*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Experiment) == sizeof(::ROOT::Shadow::Experiment));
      ::Experiment *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Experiment),0);
      static ::ROOT::TGenericClassInfo 
         instance("Experiment", "./../src/Experiment.hxx", 75,
                  typeid(::Experiment), DefineBehavior(ptr, ptr),
                  &Experiment_ShowMembers, &Experiment_Dictionary, isa_proxy, 4,
                  sizeof(::Experiment) );
      instance.SetDelete(&delete_Experiment);
      instance.SetDeleteArray(&deleteArray_Experiment);
      instance.SetDestructor(&destruct_Experiment);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Experiment*)
   {
      return GenerateInitInstanceLocal((::Experiment*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Experiment*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Experiment_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Experiment*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void Experiment_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Experiment.
      typedef ::ROOT::Shadow::Experiment ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Experiment*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_name", (void*)&sobj->_name);
      R__insp.InspectMember("string", (void*)&sobj->_name, "_name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sampleGroups", (void*)&sobj->_sampleGroups);
      R__insp.InspectMember("map<std::string,SampleGroup>", (void*)&sobj->_sampleGroups, "_sampleGroups.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_filePath", (void*)&sobj->_filePath);
      R__insp.InspectMember("string", (void*)&sobj->_filePath, "_filePath.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tree", (void*)&sobj->_tree);
      R__insp.InspectMember("string", (void*)&sobj->_tree, "_tree.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mcFiles", (void*)&sobj->_mcFiles);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->_mcFiles, "_mcFiles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dataFiles", (void*)&sobj->_dataFiles);
      R__insp.InspectMember("vector<std::string>", (void*)&sobj->_dataFiles, "_dataFiles.", false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_Experiment(void *p) {
      delete ((::Experiment*)p);
   }
   static void deleteArray_Experiment(void *p) {
      delete [] ((::Experiment*)p);
   }
   static void destruct_Experiment(void *p) {
      typedef ::Experiment current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Experiment

//______________________________________________________________________________
namespace ROOT {
   void SampleGroup_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SampleGroup.
      typedef ::ROOT::Shadow::SampleGroup ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SampleGroup*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_name", (void*)&sobj->_name);
      R__insp.InspectMember("string", (void*)&sobj->_name, "_name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dataSamples", (void*)&sobj->_dataSamples);
      R__insp.InspectMember("vector<DataSample*>", (void*)&sobj->_dataSamples, "_dataSamples.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_mcSamples", (void*)&sobj->_mcSamples);
      R__insp.InspectMember("map<std::string,DataSample*>", (void*)&sobj->_mcSamples, "_mcSamples.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SampleGroup(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SampleGroup : new ::SampleGroup;
   }
   static void *newArray_SampleGroup(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SampleGroup[nElements] : new ::SampleGroup[nElements];
   }
   // Wrapper around operator delete
   static void delete_SampleGroup(void *p) {
      delete ((::SampleGroup*)p);
   }
   static void deleteArray_SampleGroup(void *p) {
      delete [] ((::SampleGroup*)p);
   }
   static void destruct_SampleGroup(void *p) {
      typedef ::SampleGroup current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SampleGroup

namespace ROOT {
   void maplEstringcODataSamplemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcODataSamplemUgR_Dictionary();
   static void *new_maplEstringcODataSamplemUgR(void *p = 0);
   static void *newArray_maplEstringcODataSamplemUgR(Long_t size, void *p);
   static void delete_maplEstringcODataSamplemUgR(void *p);
   static void deleteArray_maplEstringcODataSamplemUgR(void *p);
   static void destruct_maplEstringcODataSamplemUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,DataSample*>*)
   {
      map<string,DataSample*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,DataSample*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,DataSample*>", -2, "/physics/software/t2k/ND280/v11r31/ROOT/v5r34p09n04/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,DataSample*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcODataSamplemUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,DataSample*>) );
      instance.SetNew(&new_maplEstringcODataSamplemUgR);
      instance.SetNewArray(&newArray_maplEstringcODataSamplemUgR);
      instance.SetDelete(&delete_maplEstringcODataSamplemUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcODataSamplemUgR);
      instance.SetDestructor(&destruct_maplEstringcODataSamplemUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,DataSample*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,DataSample*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcODataSamplemUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,DataSample*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcODataSamplemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,DataSample*> : new map<string,DataSample*>;
   }
   static void *newArray_maplEstringcODataSamplemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,DataSample*>[nElements] : new map<string,DataSample*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcODataSamplemUgR(void *p) {
      delete ((map<string,DataSample*>*)p);
   }
   static void deleteArray_maplEstringcODataSamplemUgR(void *p) {
      delete [] ((map<string,DataSample*>*)p);
   }
   static void destruct_maplEstringcODataSamplemUgR(void *p) {
      typedef map<string,DataSample*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,DataSample*>

namespace ROOT {
   void maplEstringcOSampleGroupgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOSampleGroupgR_Dictionary();
   static void *new_maplEstringcOSampleGroupgR(void *p = 0);
   static void *newArray_maplEstringcOSampleGroupgR(Long_t size, void *p);
   static void delete_maplEstringcOSampleGroupgR(void *p);
   static void deleteArray_maplEstringcOSampleGroupgR(void *p);
   static void destruct_maplEstringcOSampleGroupgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,SampleGroup>*)
   {
      map<string,SampleGroup> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,SampleGroup>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,SampleGroup>", -2, "/physics/software/t2k/ND280/v11r31/ROOT/v5r34p09n04/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,SampleGroup>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOSampleGroupgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,SampleGroup>) );
      instance.SetNew(&new_maplEstringcOSampleGroupgR);
      instance.SetNewArray(&newArray_maplEstringcOSampleGroupgR);
      instance.SetDelete(&delete_maplEstringcOSampleGroupgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOSampleGroupgR);
      instance.SetDestructor(&destruct_maplEstringcOSampleGroupgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,SampleGroup> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,SampleGroup>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOSampleGroupgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,SampleGroup>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOSampleGroupgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,SampleGroup> : new map<string,SampleGroup>;
   }
   static void *newArray_maplEstringcOSampleGroupgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,SampleGroup>[nElements] : new map<string,SampleGroup>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOSampleGroupgR(void *p) {
      delete ((map<string,SampleGroup>*)p);
   }
   static void deleteArray_maplEstringcOSampleGroupgR(void *p) {
      delete [] ((map<string,SampleGroup>*)p);
   }
   static void destruct_maplEstringcOSampleGroupgR(void *p) {
      typedef map<string,SampleGroup> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,SampleGroup>

namespace ROOT {
   void vectorlEDataSamplemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEDataSamplemUgR_Dictionary();
   static void *new_vectorlEDataSamplemUgR(void *p = 0);
   static void *newArray_vectorlEDataSamplemUgR(Long_t size, void *p);
   static void delete_vectorlEDataSamplemUgR(void *p);
   static void deleteArray_vectorlEDataSamplemUgR(void *p);
   static void destruct_vectorlEDataSamplemUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<DataSample*>*)
   {
      vector<DataSample*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<DataSample*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<DataSample*>", -2, "/physics/software/t2k/ND280/v11r31/ROOT/v5r34p09n04/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<DataSample*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEDataSamplemUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<DataSample*>) );
      instance.SetNew(&new_vectorlEDataSamplemUgR);
      instance.SetNewArray(&newArray_vectorlEDataSamplemUgR);
      instance.SetDelete(&delete_vectorlEDataSamplemUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEDataSamplemUgR);
      instance.SetDestructor(&destruct_vectorlEDataSamplemUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<DataSample*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<DataSample*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEDataSamplemUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<DataSample*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEDataSamplemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DataSample*> : new vector<DataSample*>;
   }
   static void *newArray_vectorlEDataSamplemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DataSample*>[nElements] : new vector<DataSample*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEDataSamplemUgR(void *p) {
      delete ((vector<DataSample*>*)p);
   }
   static void deleteArray_vectorlEDataSamplemUgR(void *p) {
      delete [] ((vector<DataSample*>*)p);
   }
   static void destruct_vectorlEDataSamplemUgR(void *p) {
      typedef vector<DataSample*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<DataSample*>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/physics/software/t2k/ND280/v11r31/ROOT/v5r34p09n04/Linux-x86_64/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* ../dict/Experiment_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableExperiment_Dict();

extern "C" void G__set_cpp_environmentExperiment_Dict() {
  G__cpp_reset_tagtableExperiment_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevExperiment_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SampleGroup */
static int G__Experiment_Dict_620_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleGroup[n];
     } else {
       p = new((void*) gvp) SampleGroup[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleGroup;
     } else {
       p = new((void*) gvp) SampleGroup;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SampleGroup(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SampleGroup(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SampleGroup(
*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, *(map<std::string,DataSample*>*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) SampleGroup(
*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, *(map<std::string,DataSample*>*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleGroup(
*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, (DataSample*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SampleGroup(
*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, (DataSample*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleGroup(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SampleGroup(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SampleGroup(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(map<std::string,std::string>*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) SampleGroup(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(map<std::string,std::string>*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleGroup(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) SampleGroup(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SampleGroup(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) SampleGroup(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->AddDataSample(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->AddDataSample((DataSample*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->AddMCSample(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->AddMCSample(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->AddMCSamples(*(map<std::string,std::string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->AddMCSamples(*(map<std::string,DataSample*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SampleGroup*) G__getstructoffset())->GetDataSample());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SampleGroup*) G__getstructoffset())->GetMCSample(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DataSample*>& obj = ((SampleGroup*) G__getstructoffset())->GetDataSamples();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<std::string,DataSample*>& obj = ((SampleGroup*) G__getstructoffset())->GetMCSamples();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SampleGroup*) G__getstructoffset())->HasMCSample(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->GetPOT(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->GetPOT(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_620_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SampleGroup*) G__getstructoffset())->SetCurrentTree(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Experiment_Dict_620_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SampleGroup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SampleGroup(*(SampleGroup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SampleGroup G__TSampleGroup;
static int G__Experiment_Dict_620_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SampleGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SampleGroup*) (soff+(sizeof(SampleGroup)*i)))->~G__TSampleGroup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SampleGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SampleGroup*) (soff))->~G__TSampleGroup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Experiment_Dict_620_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SampleGroup* dest = (SampleGroup*) G__getstructoffset();
   *dest = *(SampleGroup*) libp->para[0].ref;
   const SampleGroup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Experiment */
static int G__Experiment_Dict_639_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Experiment* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Experiment(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Experiment(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_Experiment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Experiment* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Experiment(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) Experiment(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_Experiment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Experiment* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Experiment(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) Experiment(
*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_Experiment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Experiment* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Experiment(
*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, (DataSample*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Experiment(
*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, (DataSample*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Experiment(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Experiment(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_Experiment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Experiment*) G__getstructoffset())->HasSampleGroup(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->AddSampleGroup(*(string*) libp->para[0].ref, *(SampleGroup*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->AddSampleGroup(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(map<std::string,std::string>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((Experiment*) G__getstructoffset())->AddSampleGroup(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
      G__setnull(result7);
      break;
   case 2:
      ((Experiment*) G__getstructoffset())->AddSampleGroup(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->AddSampleGroup(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, *(map<std::string,DataSample*>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((Experiment*) G__getstructoffset())->AddSampleGroup(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1])
, (DataSample*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((Experiment*) G__getstructoffset())->AddSampleGroup(*(string*) libp->para[0].ref, (DataSample*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<std::string,SampleGroup>& obj = ((Experiment*) G__getstructoffset())->GetSampleGroups();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SampleGroup& obj = ((Experiment*) G__getstructoffset())->GetSampleGroup(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Experiment*) G__getstructoffset())->GetDataSample(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Experiment*) G__getstructoffset())->GetMCSample(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<std::string,DataSample*>& obj = ((Experiment*) G__getstructoffset())->GetMCSamples(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->DumpPOT(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->DumpPOTRatios();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Experiment*) G__getstructoffset())->GetOverallPOTRatio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((Experiment*) G__getstructoffset())->GetFilePath();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->SetCurrentTree(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const Experiment*) G__getstructoffset())->GetCurrentTree();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->Dump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::string>* pobj;
         vector<std::string> xobj = ((Experiment*) G__getstructoffset())->GetMCFileVector();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::string>* pobj;
         vector<std::string> xobj = ((Experiment*) G__getstructoffset())->GetDataFileVector();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Experiment_Dict_639_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Experiment*) G__getstructoffset())->AddSampleFilesToVector(*(SampleGroup*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Experiment_Dict_639_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Experiment* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Experiment(*(Experiment*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Experiment_DictLN_Experiment));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Experiment G__TExperiment;
static int G__Experiment_Dict_639_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Experiment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Experiment*) (soff+(sizeof(Experiment)*i)))->~G__TExperiment();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Experiment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Experiment*) (soff))->~G__TExperiment();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Experiment_Dict_639_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Experiment* dest = (Experiment*) G__getstructoffset();
   *dest = *(Experiment*) libp->para[0].ref;
   const Experiment& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SampleGroup */

/* Experiment */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncExperiment_Dict {
 public:
  G__Sizep2memfuncExperiment_Dict(): p(&G__Sizep2memfuncExperiment_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncExperiment_Dict::*p)();
};

size_t G__get_sizep2memfuncExperiment_Dict()
{
  G__Sizep2memfuncExperiment_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceExperiment_Dict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableExperiment_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TTree*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__Experiment_DictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<AnaBunchC*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,DataSample*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,DataSample*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,DataSample*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,DataSample*,less<string> >",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::string>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DataSample*>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,SampleGroup>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,SampleGroup>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,SampleGroup>",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,SampleGroup,less<string> >",117,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Experiment_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SampleGroup */
static void G__setup_memvarSampleGroup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   { SampleGroup *p; p=(SampleGroup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_string),-1,-1,2,"_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR),G__defined_typename("vector<DataSample*>"),-1,2,"_dataSamples=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR),G__defined_typename("map<std::string,DataSample*>"),-1,2,"_mcSamples=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Experiment */
static void G__setup_memvarExperiment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Experiment_DictLN_Experiment));
   { Experiment *p; p=(Experiment*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_string),-1,-1,2,"_name=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR),G__defined_typename("map<std::string,SampleGroup>"),-1,2,"_sampleGroups=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_string),-1,-1,2,"_filePath=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_string),-1,-1,2,"_tree=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"_mcFiles=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"_dataFiles=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarExperiment_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSampleGroup(void) {
   /* SampleGroup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup));
   G__memfunc_setup("SampleGroup",1135,G__Experiment_Dict_620_0_1, 105, G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleGroup",1135,G__Experiment_Dict_620_0_2, 105, G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleGroup",1135,G__Experiment_Dict_620_0_3, 105, G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name U 'DataSample' - 0 - dataSample "
"u 'map<string,DataSample*,less<string>,allocator<pair<const string,DataSample*> > >' 'map<std::string,DataSample*>' 1 - mcSamples", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleGroup",1135,G__Experiment_Dict_620_0_4, 105, G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name U 'DataSample' - 0 - dataSample "
"U 'DataSample' - 0 '0' mcSample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleGroup",1135,G__Experiment_Dict_620_0_5, 105, G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - dataFile "
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 1 - mcFiles", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SampleGroup",1135,G__Experiment_Dict_620_0_6, 105, G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - dataFile "
"u 'string' - 11 '\"\"' mcFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDataSample",1253,G__Experiment_Dict_620_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDataSample",1253,G__Experiment_Dict_620_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'DataSample' - 0 - sample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMCSample",1019,G__Experiment_Dict_620_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMCSample",1019,G__Experiment_Dict_620_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name U 'DataSample' - 0 - sample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMCSamples",1134,G__Experiment_Dict_620_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 1 - mcFiles", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMCSamples",1134,G__Experiment_Dict_620_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,DataSample*,less<string>,allocator<pair<const string,DataSample*> > >' 'map<std::string,DataSample*>' 1 - mcSamples", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSample",1276,G__Experiment_Dict_620_0_13, 85, G__get_linked_tagnum(&G__Experiment_DictLN_DataSample), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCSample",1042,G__Experiment_Dict_620_0_14, 85, G__get_linked_tagnum(&G__Experiment_DictLN_DataSample), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSamples",1391,G__Experiment_Dict_620_0_15, 117, G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR), G__defined_typename("vector<DataSample*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCSamples",1157,G__Experiment_Dict_620_0_16, 117, G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR), G__defined_typename("map<std::string,DataSample*>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasMCSample",1038,G__Experiment_Dict_620_0_17, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPOT",531,G__Experiment_Dict_620_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - POTdata f - 'Float_t' 1 - POTmc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPOT",531,G__Experiment_Dict_620_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - POTdata f - 'Float_t' 1 - POTmc "
"f - 'Float_t' 1 - POTsand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentTree",1439,G__Experiment_Dict_620_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SampleGroup", 1135, G__Experiment_Dict_620_0_21, (int) ('i'), G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 0, 1, 1, 1, 0, "u 'SampleGroup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SampleGroup", 1261, G__Experiment_Dict_620_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Experiment_Dict_620_0_23, (int) ('u'), G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 1, 1, 1, 1, 0, "u 'SampleGroup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncExperiment(void) {
   /* Experiment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Experiment_DictLN_Experiment));
   G__memfunc_setup("Experiment",1057,G__Experiment_Dict_639_0_1, 105, G__get_linked_tagnum(&G__Experiment_DictLN_Experiment), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Experiment",1057,G__Experiment_Dict_639_0_2, 105, G__get_linked_tagnum(&G__Experiment_DictLN_Experiment), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - configfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Experiment",1057,G__Experiment_Dict_639_0_3, 105, G__get_linked_tagnum(&G__Experiment_DictLN_Experiment), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - file1 "
"u 'string' - 11 - file2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Experiment",1057,G__Experiment_Dict_639_0_4, 105, G__get_linked_tagnum(&G__Experiment_DictLN_Experiment), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name U 'DataSample' - 0 - s1 "
"U 'DataSample' - 0 '0' s2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasSampleGroup",1419,G__Experiment_Dict_639_0_5, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSampleGroup",1400,G__Experiment_Dict_639_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'SampleGroup' - 1 - sampleGroup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSampleGroup",1400,G__Experiment_Dict_639_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - dataFile "
"u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 1 - mcFiles", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSampleGroup",1400,G__Experiment_Dict_639_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - dataFile "
"u 'string' - 11 '\"\"' mcFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSampleGroup",1400,G__Experiment_Dict_639_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name U 'DataSample' - 0 - dataFile "
"u 'map<string,DataSample*,less<string>,allocator<pair<const string,DataSample*> > >' 'map<std::string,DataSample*>' 1 - mcSamples", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSampleGroup",1400,G__Experiment_Dict_639_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - name U 'DataSample' - 0 - dataFile "
"U 'DataSample' - 0 '0' mcSample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSampleGroups",1538,G__Experiment_Dict_639_0_11, 117, G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR), G__defined_typename("map<std::string,SampleGroup>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSampleGroup",1423,G__Experiment_Dict_639_0_12, 117, G__get_linked_tagnum(&G__Experiment_DictLN_SampleGroup), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSample",1276,G__Experiment_Dict_639_0_13, 85, G__get_linked_tagnum(&G__Experiment_DictLN_DataSample), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCSample",1042,G__Experiment_Dict_639_0_14, 85, G__get_linked_tagnum(&G__Experiment_DictLN_DataSample), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - name2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCSamples",1157,G__Experiment_Dict_639_0_15, 117, G__get_linked_tagnum(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR), G__defined_typename("map<std::string,DataSample*>"), 1, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpPOT",649,G__Experiment_Dict_639_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpPOTRatios",1275,G__Experiment_Dict_639_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOverallPOTRatio",1767,G__Experiment_Dict_639_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFilePath",1069,G__Experiment_Dict_639_0_19, 117, G__get_linked_tagnum(&G__Experiment_DictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrentTree",1439,G__Experiment_Dict_639_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentTree",1427,G__Experiment_Dict_639_0_21, 117, G__get_linked_tagnum(&G__Experiment_DictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,G__Experiment_Dict_639_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCFileVector",1443,G__Experiment_Dict_639_0_23, 117, G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataFileVector",1677,G__Experiment_Dict_639_0_24, 117, G__get_linked_tagnum(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSampleFilesToVector",2196,G__Experiment_Dict_639_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SampleGroup' - 1 - sampleGroup", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Experiment", 1057, G__Experiment_Dict_639_0_26, (int) ('i'), G__get_linked_tagnum(&G__Experiment_DictLN_Experiment), -1, 0, 1, 1, 1, 0, "u 'Experiment' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Experiment", 1183, G__Experiment_Dict_639_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Experiment_Dict_639_0_28, (int) ('u'), G__get_linked_tagnum(&G__Experiment_DictLN_Experiment), -1, 1, 1, 1, 1, 0, "u 'Experiment' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncExperiment_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalExperiment_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcExperiment_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__Experiment_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__Experiment_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR = { "vector<TTree*,allocator<TTree*> >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TTree*,allocator<TTree*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_vectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgR = { "vector<AnaBunchC*,allocator<AnaBunchC*> >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_reverse_iteratorlEvectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<AnaBunchC*,allocator<AnaBunchC*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_DataSample = { "DataSample" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_SampleGroup = { "SampleGroup" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR = { "map<string,DataSample*,less<string>,allocator<pair<const string,DataSample*> > >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR = { "vector<DataSample*,allocator<DataSample*> >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_reverse_iteratorlEvectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<DataSample*,allocator<DataSample*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_Experiment = { "Experiment" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR = { "map<string,SampleGroup,less<string>,allocator<pair<const string,SampleGroup> > >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__Experiment_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableExperiment_Dict() {
  G__Experiment_DictLN_string.tagnum = -1 ;
  G__Experiment_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Experiment_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__Experiment_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Experiment_DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__Experiment_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__Experiment_DictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__Experiment_DictLN_vectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_reverse_iteratorlEvectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Experiment_DictLN_DataSample.tagnum = -1 ;
  G__Experiment_DictLN_SampleGroup.tagnum = -1 ;
  G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_reverse_iteratorlEvectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Experiment_DictLN_Experiment.tagnum = -1 ;
  G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__Experiment_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableExperiment_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_string);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_vectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_reverse_iteratorlEvectorlEAnaBunchCmUcOallocatorlEAnaBunchCmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_DataSample);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Experiment_DictLN_SampleGroup),sizeof(SampleGroup),-1,295168,(char*)NULL,G__setup_memvarSampleGroup,G__setup_memfuncSampleGroup);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_maplEstringcODataSamplemUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcODataSamplemUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_vectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_reverse_iteratorlEvectorlEDataSamplemUcOallocatorlEDataSamplemUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Experiment_DictLN_Experiment),sizeof(Experiment),-1,295936,(char*)NULL,G__setup_memvarExperiment,G__setup_memfuncExperiment);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_maplEstringcOSampleGroupcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOSampleGroupgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__Experiment_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupExperiment_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupExperiment_Dict()");
  G__set_cpp_environmentExperiment_Dict();
  G__cpp_setup_tagtableExperiment_Dict();

  G__cpp_setup_inheritanceExperiment_Dict();

  G__cpp_setup_typetableExperiment_Dict();

  G__cpp_setup_memvarExperiment_Dict();

  G__cpp_setup_memfuncExperiment_Dict();
  G__cpp_setup_globalExperiment_Dict();
  G__cpp_setup_funcExperiment_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncExperiment_Dict();
  return;
}
class G__cpp_setup_initExperiment_Dict {
  public:
    G__cpp_setup_initExperiment_Dict() { G__add_setup_func("Experiment_Dict",(G__incsetup)(&G__cpp_setupExperiment_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initExperiment_Dict() { G__remove_setup_func("Experiment_Dict"); }
};
G__cpp_setup_initExperiment_Dict G__cpp_setup_initializerExperiment_Dict;

